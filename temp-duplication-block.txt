// Group by month
            const monthlyData = {};
            transactions.forEach(transaction => {
                const date = new Date(transaction.date);
                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                
                if (!monthlyData[monthKey]) {
                    monthlyData[monthKey] = { income: 0, expenses: 0 };
                }
                
                if (transaction.type === 'income') {
                    monthlyData[monthKey].income += transaction.amount;
                } else {
                    monthlyData[monthKey].expenses += transaction.amount;
                }
            });
            
            // Get last 6 months
            const months = Object.keys(monthlyData).sort().slice(-6);
            const chartData = months.map(month => {
                const data = monthlyData[month] || { income: 0, expenses: 0 };
                return {
                    month: new Date(month + '-01').toLocaleDateString('pt-BR', { month: 'short', year: '2-digit' }),
                    income: data.income,
                    expenses: data.expenses
                };
            });
            
            // Create visual chart representation
            const maxValue = Math.max(...chartData.map(d => Math.max(d.income, d.expenses)));
            console.log('üìä Dados do gr√°fico:', chartData);
            console.log('üìä Valor m√°ximo:', maxValue);
            
            chartContainer.innerHTML = `
                <div class="public-chart">
                    <div class="chart-legend">
                        <div class="legend-item">
                            <div class="legend-color income"></div>
                            <span>Receitas</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color expenses"></div>
                            <span>Despesas</span>
                        </div>
                    </div>
                    <div class="chart-bars">
                        ${chartData.length > 0 ? chartData.map(d => `
                            <div class="chart-month">
                                <div class="chart-bars-container">
                                    <div class="chart-bar income" style="height: ${maxValue > 0 ? (d.income / maxValue * 100) : 0}%">
                                        <div class="bar-value">R$ ${d.income.toFixed(0)}</div>
                                    </div>
                                    <div class="chart-bar expenses" style="height: ${maxValue > 0 ? (d.expenses / maxValue * 100) : 0}%">
                                        <div class="bar-value">R$ ${d.expenses.toFixed(0)}</div>
                                    </div>
                                </div>
                                <div class="chart-month-label">${d.month}</div>
                            </div>
                        `).join('') : '<div class="no-data">Nenhum dado dispon√≠vel</div>'}
                    </div>
                </div>
            `;
        }
        
        function loadPublicExpensesDistributionChart(transactions) {
            console.log('ü•ß Iniciando gr√°fico de distribui√ß√£o de gastos...');
            const chartContainer = document.getElementById('expenses-distribution-chart');
            if (!chartContainer) {
                console.error('‚ùå Container do gr√°fico n√£o encontrado: expenses-distribution-chart');
                return;
            }
            console.log('‚úÖ Container encontrado:', chartContainer);
            
            // Teste simples primeiro
            const expenses = transactions.filter(t => t.type === 'expense');
            const categoryData = {};
            expenses.forEach(expense => {
                if (!categoryData[expense.category]) {
                    categoryData[expense.category] = 0;
                }
                categoryData[expense.category] += expense.amount;
            });
            
            const categoriesText = Object.entries(categoryData)
                .sort(([,a], [,b]) => b - a)
                .map(([cat, amount]) => `${getCategoryText(cat)}: R$ ${amount.toFixed(2)}`)
                .join('<br>');
            
            chartContainer.innerHTML = `
                <div style="background: linear-gradient(45deg, #17a2b8, #6f42c1); height: 200px; color: white; display: flex; align-items: center; justify-content: center; border-radius: 10px; font-size: 1rem; font-weight: bold; text-align: center;">
                    ü•ß DISTRIBUI√á√ÉO DE GASTOS<br><br>
                    ${categoriesText}
                </div>
            `;
            return; // Parar aqui por enquanto
        }
        
        function getCategoryText(category) {
            const categories = {
                'donation': 'Doa√ß√£o',
                'adoption': 'Ado√ß√£o',
                'event': 'Evento',
                'veterinary': 'Veterin√°rio',
                'food': 'Alimenta√ß√£o',
                'supplies': 'Suprimentos',
                'maintenance': 'Manuten√ß√£o',
                'other': 'Outros'
            };
            return categories[category] || category;
        }
        
        // Fun√ß√£o para carregar dados de teste diretamente no site p√∫blico
        function loadTestData() {
            console.log('üß™ Carregando dados de teste...');
            
            const sampleTransactions = [
                // Receitas
                { id: 1, type: 'income', category: 'donation', amount: 500.00, date: '2024-01-15', description: 'Doa√ß√£o - Maria Silva' },
                { id: 2, type: 'income', category: 'donation', amount: 250.00, date: '2024-01-20', description: 'Doa√ß√£o - Jo√£o Santos' },
                { id: 3, type: 'income', category: 'adoption', amount: 100.00, date: '2024-01-25', description: 'Taxa de ado√ß√£o - Luna' },
                { id: 4, type: 'income', category: 'event', amount: 800.00, date: '2024-02-01', description: 'Feira de ado√ß√£o - Shopping' },
                { id: 5, type: 'income', category: 'donation', amount: 300.00, date: '2024-02-10', description: 'Doa√ß√£o - Ana Costa' },
                { id: 6, type: 'income', category: 'donation', amount: 150.00, date: '2024-02-15', description: 'Doa√ß√£o - Pedro Lima' },
                { id: 7, type: 'income', category: 'donation', amount: 400.00, date: '2024-03-01', description: 'Doa√ß√£o - Empresa XYZ' },
                { id: 8, type: 'income', category: 'event', amount: 600.00, date: '2024-03-10', description: 'Bazar beneficente' },
                
                // Despesas
                { id: 9, type: 'expense', category: 'veterinary', amount: 180.00, date: '2024-01-18', description: 'Consulta - Max (Dr. Carlos)' },
                { id: 10, type: 'expense', category: 'veterinary', amount: 120.00, date: '2024-01-22', description: 'Vacina - Bella (Dr. Ana)' },
                { id: 11, type: 'expense', category: 'food', amount: 85.00, date: '2024-01-28', description: 'Ra√ß√£o Premium 15kg' },
                { id: 12, type: 'expense', category: 'veterinary', amount: 200.00, date: '2024-02-05', description: 'Castra√ß√£o - Thor (Dr. Carlos)' },
                { id: 13, type: 'expense', category: 'supplies', amount: 45.00, date: '2024-02-08', description: 'Coleiras e guias' },
                { id: 14, type: 'expense', category: 'food', amount: 90.00, date: '2024-02-12', description: 'Ra√ß√£o filhotes 10kg' },
                { id: 15, type: 'expense', category: 'veterinary', amount: 75.00, date: '2024-02-18', description: 'Verm√≠fugo - Lola (Dr. Ana)' },
                { id: 16, type: 'expense', category: 'maintenance', amount: 120.00, date: '2024-02-20', description: 'Limpeza e manuten√ß√£o canil' },
                { id: 17, type: 'expense', category: 'supplies', amount: 35.00, date: '2024-02-22', description: 'Produtos de limpeza' },
                { id: 18, type: 'expense', category: 'veterinary', amount: 150.00, date: '2024-03-05', description: 'Exames - Nina (Dr. Ana)' },
                { id: 19, type: 'expense', category: 'food', amount: 95.00, date: '2024-03-12', description: 'Ra√ß√£o especial gatos 12kg' },
                { id: 20, type: 'expense', category: 'other', amount: 80.00, date: '2024-03-15', description: 'Transporte para feira' }
            ];
            
            // Salvar no localStorage
            localStorage.setItem('ligaDoBem_transactions', JSON.stringify(sampleTransactions));
            console.log('‚úÖ Dados salvos no localStorage');
            
            // Recarregar a p√°gina de transpar√™ncia
            loadTransparency();
            
            // Teste direto dos containers
            setTimeout(() => {
                const incomeChart = document.getElementById('income-expenses-chart');
                const expensesChart = document.getElementById('expenses-distribution-chart');
                
                console.log('üîç Container receitas vs despesas:', incomeChart);
                console.log('üîç Container distribui√ß√£o gastos:', expensesChart);
                
                if (incomeChart) {
                    console.log('‚úÖ Container receitas encontrado');
                    console.log('üìÑ Conte√∫do atual:', incomeChart.innerHTML);
                } else {
                    console.error('‚ùå Container receitas N√ÉO encontrado');
                }
                
                if (expensesChart) {
                    console.log('‚úÖ Container gastos encontrado');
                    console.log('üìÑ Conte√∫do atual:', expensesChart.innerHTML);
                } else {
                    console.error('‚ùå Container gastos N√ÉO encontrado');
                }
            }, 1000);
            
            alert('‚úÖ Dados de teste carregados! Veja os gr√°ficos abaixo.');
        }
